/*
    http.json - Http configuration file

    The file is an enhanced JSON file. Property keys do not need to be enclosed in quotes.
    Also the last property in a collection may be terminated with a comma, and strings may
    span multiple lines.
*/
{
    /*
        Single word application name. This is typically provided by the package.json instead.
     */
    name: "blog",

    /*
        Multi-word title for the application. Used for display.
        This is typically provided by the package.json instead.
     */
    title: "My Blog",

    /*
        One-line description for the application. Used in the Pak catalog.
        This is typically provided by the package.json instead.
     */
    description: "My Blog detailing adventures in the Artic",

    /*
        SemVer compatible version string
        This is typically provided by the package.json instead.
     */
    version: "1.0.0",

    /*
        Opportunity to remap directories. These are the default values.
     */
    directories: {
        "cache": "cache",
        "contents": "contents",
        "controllers": "controllers",
        "db": "db",
        "documents": "dist",
        "home": ".",
        "layouts": "layouts",
        "lib": "contents/lib",
        "paks": "paks",
        "pakscache": "~/.paks",
        "partials": "partials",
        "src": "src",
        "top": ".",
        "upload": "/tmp",
    },

    /*
        HTTP related configuration
     */
    http: {
        /*
            All the properties below apply on a per-route basis
         */

        /*
            Alias a URL prefix to a directory under the route home
         */
        aliases: {
            "/cgi-bin/": "cgi-bin",
        },

        /*
            Attach the current host to a specific endpoint
         */
        attach: ":443",

        /*
            Auto finalize requests after running handler (ESP). Default to true.
         */
        autoFinalize: true,

        /*
            Authentication configuration
         */
        auth: {
            /*
                Automatic login configuration. Used for debugging.
             */
            auto: {
                /*
                    Give the auto-logged-in user these abilities
                 */
                abilities: [ "*" ],

                /*
                    Automatically login as this username
                 */
                name: "",

                /*
                    Defined roles for the automatically logged in user
                 */
                roles: "",
            },

            /*
                URL for the application login dialog
             */
            login: "",

            /*
                Authentication realm
             */
            realm: "example.com",

            /*
                Required usernames or roles for user to posses before authorizing
             */
            require: {
                /*
                    List of abilities or roles a user must possess before authorized for access to documents in this route
                 */
                roles: [],

                /*
                    Restrict login to this set of users. Set to true or ["*"] for any valid user.
                 */
                users: ["*"]
            },

            /*
                Defined roles for users with abilities that comprise the roles.
             */
            roles: {
                "executive":     ["manage", "direct"],
                "user":          ["view"],
                "administrator": ["view", "edit"],
            },

            session: {
                /*
                    Define the session cookie prefix
                 */
                cookie: "-esp-cookie-",

                /*
                    Enable / disable sessions
                 */
                enable: true,

                /*
                    Persist session cookie to disk. Means browser restarts do not exit session.
                    If true, an Expires field is included in the cookie.
                 */
                persist: true,

                /*
                    Determine if the cookie is visible to browser scripts
                 */
                visibility: true,
            },

            /*
                Auth Store to use, "app" means user credentials are stored in a server-side application database
                Set to "app", "config" or "system".
             */
            store: "app",

            /*
                Type of authentication protocol to use
                Set to: app, basic, digest, form or none
             */
            type: "basic",

            /*
                Define user accounts. More typically, these are stored in a database.
             */
            users: {
                ralph: {
                    password: "BF1:00128:bWFG5x85BYfuf7GW:w+zzIU0WTZQYaNAe0sPecWyry8Z9GrKH",
                    roles:    ["user", "administrator", "purchase"],
                },
            },
        },

        /*
            Response caching directives
            Can also just set "cache" to true which defines a client cache of 1 day for common static file types.
         */
        cache: [ {
            /*
                Cache at the client
             */
            client: "1day",

            /*
                Cache at the server
             */
            server: "1hour",

            /*
                File extensions to cache
             */
            extensions: [ "css", "gif", "ico", "jpeg", "jpg", "js", "html", "less", "png", "pdf", "txt" ],

            /*
                URLs to cache. If the URL has a query, then only that exact request will be cached.
                The query should be in sorted urlencoded form. If omitted, defaults to "/"
             */
            urls: [ "/" ],

            /*
                Request methods eligible for caching. If omitted, defaults to "GET, POST".
             */
            methods: [ "*" ],

            /*
                Responses to cache based on mime type for the response document. If omitted, defaults to all mime types.
             */
            mime: [ "*" ],

            /*
                Caching of responses will be handled manually. Automatic response caching is disabled. Defaults to false.
             */
            manual: true,

            /*
                Uniquely cache requests with different parameters (query and post data). Defaults to false.
             */
            unique: true,
        } ],


        /*
            Canonical address for this host to be used in redirections
         */
        canonical: "http://example.com",

        cgi: {
            /*
                Define if shell characters are escaped in environment variables
             */
            escape: true,

            /*
                Define a prefix string for environment variables
             */
            prefix: "CGI_",
        },

        /*
            Serve compressed content
            Can also set to an array of extensions to serve compressed.
         */
        compress: true,

        /*
            FUTURE
         */
        conditions: [ "reserved" ],

        /*
            Database specification. Supported providers: sdb for SQLite and mdb for Memory Database.
         */
        database: "mdb://blog.mdb",

        /*
            Delete file uploads after the request completes
         */
        deleteUploads: true,

        /*
            Opportunity to remap directories. Same as the top level "directories"
         */
        directories: {},

        /*
            Documents to serve. Same as {directories: documents: "DIR" }
         */
        documents: "directory",

        /*
            Error pages to serve for specific error response codes
         */
        errors: {
            "404": "/notFound.html",
        },

        /*
            Default presentation formats for various types
         */
        formats: {
            "date": "yyyy-MM-dd",
            "float": 2,
            /*
                Expect requests and responses in JSON format (thick client)
             */
            "response": "json",
        },

        /*
            Response header management
         */
        headers: {
            /*
                Headers to add if not already defined
             */
            add: {
                "Content-Security-Policy":   "default-src 'self'",
                "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
                "CrossOrigin":               "origin=* credentials=yes headers=X-CORS-HEADER age=3000",
            },
            /*
                Headers to remove
             */
            remove: [],

            /*
                Headers to set and overwrite any existing headers
             */
            set: { },
        },

        /*
            Home directory for the server. Same as {directories: home: "DIR" }
         */
        home: "directory",

        /*
            List of virtual hosts
            A host may then define most other properties to create route-specific configurations.
         */
        hosts: [
            {
                attach: ':443',
                name: '/example.com|example.org/',
                redirect: 'https://example.com/',
            },
        ],

        /*
            Enable or disable HTTP/2 support
         */
        http2: enable,

        /*
            List of index documents to serve for directory level requests
         */
        indexes: [
            "index.esp",
            "index.html"
        ],

        /*
            Per-language content
         */
        languages: {
            /*
                Language code
             */
            en: {
                /*
                    If using a directory per-language
                 */
                path: "/path/to/english",

                /*
                    If using a document prefix per-language
                 */
                prefix: "en",

                /*
                    If using a document suffix per-language
                 */
                suffix: "en",

                /*
                    Set to true if this is the default language
                 */
                "default": true,
            }
        },

        /*
            Sandbox limits
         */
        limits: {
            buffer:             "32KB",         /* Default buffer size */
            cache:              "10MB",         /* Maximum response cache size */
            cacheItem:          "200KB",        /* Per-item max cache size */
            chunk:              "64KB",         /* Default chunk encoding size */
            clients:            100,            /* Maximum number of simultaneous clients */
            connections:        50,             /* Maximum number of simultaneous connections */
            files:              "unlimited",    /* Maximum number of open files */
            frame:              "16K",          /* Maximum HTTP/2 input frame size */
            keepAlive:          200,            /* Maximum HTTP/1 serial requests on a connection */
            processes:          "unlimited",    /* Maximum number of processes to run */
            rxBody:             "100K",         /* Maximum receive body data */
            rxForm:             "32K",          /* Maximum receive form body data */
            rxHeader:           "32K",          /* Maximum receive HTTP headers size */
            memory:             "200MB",        /* Maximum memory heap usage */
            requests:           20,             /* Maximum simultaneous requests per client */
            sessions:           100,            /* Maximum total client sessions */
            streams:            20,             /* Maximum simultaneous HTTP/2 streams per connection */
            txBody:             "2GB",          /* Maximum transmit body size */
            upload:             "2GB",          /* Maximum file upload size */
            uri:                "8K",           /* Maximum URL size */
            webSockets:         20,             /* Maximum number of Web Sockets */
            webSocketsMessage:  "50K",          /* Maximum WebSockets message size */
            webSocketsPacket:   "50K",          /* Maximum WebSockets packet size */
            webSocketsFrame:    "4K",           /* Maximum Websockets frame size */
            window:             65535,          /* HTTP/2 window size */
            workers:            4,              /* Maximum number of worker threads */
        },

        /*
            Log file configuration
         */
        log: {
            /*
                Log filename or destination
             */
            location: "stdout",

            /*
                Verbosity level (0-5)
             */
            level: "2",

            /*
                Keep up to 5 log files
             */
            backup: 5,

            /*
                Start a new log file on restart
             */
            anew: true,

            /*
                Maximum log file size before starting a new log file
             */
            size: "10MB",

            /*
                Add a timestamp to the log file
             */
            timestamp: "1hr",
        },

        /*
            Supported request methods for this route. Use "*" for all methods, or omit definition. Upper case.
         */
        methods: [ "GET", "POST" ],

        /*
            Set the host name to serve.
            host name is used when matching client requests to hosts using the Http request Host header.
            If the host name starts with "*", it will match names that contain the name.
            If the host name ends with "*", it will match names that start with the name.
            If the host name begins and ends with a "/", the name is assumed to be a regular expression.
         */
        name: "example.com",

        /*
            Required request parameters before this route will match a request
         */
        params: [ {
            "name":   "name",
            "value":  "john",
            "equals": true,
        } ],

        /*
            Regular expression used to match the route with the request URI
         */
        pattern: "^/route/auth",

        /*
            Request pipeline construction
         */
        pipeline: {
            /*
                Ordered list of filters with extensions for which the filter will apply
             */
            filters: [{
                name: "myFilter",
                extensions: [ "txt", "*" ],
            }],

            /*
                Define a single handler to be used. Overrides "handlers"
             */
            handler: "fileHandler",

            /*
                Defined request handlers and the extensions for which they apply
             */
            handlers: {
                fileHandler: [ "html", "gif", "jpeg", "jpg", "png", "pdf", "ico", "css", "js", "txt" ],
                espHandler:  [ "*" ],
            },
        },

        /*
            Request URI prefix. This prefix is removed from the URI before processing the request.
         */
        prefix: "/route/auth",

        /*
            Redirections
         */
        redirect: [ {
                /* Redirect all traffic over SSL */
                status: 302,
                to:     "https://"
            }, {
                /* Redirect a specific document */
                from: "/pressRelease",
                status: 301,
                to: "${request.scheme}://${request:host}/fixedPressRelease.html"
            }
        ],

        /*
            Automatically rename file uploads to use the client specified filename after sanitizing.
            Recommended to NOT use this on any public network. Defaults to false.
         */
        renameUploads: true,

        /*
            List of routes
         */
        routes: [
        /*
            Routes may nest other routes under their own "routes" property.
            Properties can be a route-set name, or an array of routes objects.
            A route will typically define a "pattern" and may override most per-route properties.
            A route may then define most other properties to create route-specific configurations.
            The special route string "reset" will reset inherited routes and "print" will display the current route table.

            For example:

            "reset",
            "esp-server",
            {
                pattern: "^/auth/basic",
                auth: {
                    realm: "example.com",
                    type: "basic|digest",
                },
            },
            {
                "resources": {
                    "sets": [
                        "esp-server"
                    ],
                    "groups": [
                        "user",
                    ],
                    "singletons": [
                        "dashboard",
                    ]
                }
            },
            "print",
         */
        ],

        /*
            Supported scheme for this route. Set to https to require SSL.
         */
        scheme: "https",

        /*
            Server related configuration that applies globally
            Ignored if hosted in Appweb, when server configuration comes from appweb.conf.
         */
        server: {
            /*
                Account execution
             */
            account: {
                /*
                    Run as user
                 */
                user: "name",

                /*
                    Run as member of group
                 */
                group: "name",
            },

            /*
                Defensive counter-measures. These are referenced by "monitors"
             */
            defenses: {
                /*
                    Name of defense and collection of properties for the remedy
                 */
                block: {
                    "remedy": "ban",
                    "status": 406,
                    "message": "Client temporarily banned due to monitored limit exceeded",
                    "period": "30mins",
                },
            },

            /*
                Listening endpoints. Ignored if hosted.
             */
            listen: [
                "http://*:4000",
                "http://127.0.0.1:4000",
                "https://127.0.0.1:4443",
            ],


            /*
                Load the named modules
             */
            modules: [
                {
                    name: 'myModule',
                    path: '/path/to/module',
                }
            ],

            /*
                Defensive counter-measure monitor policies
             */
            monitors: {
                /*
                    Name of monitor
                 */
                missing: {
                    /*
                        Monitor expression to evaluate
                     */
                    "expression": "NotFoundErrors > 5",

                    /*
                        Frequence to check the monitor expression
                     */
                    "period": "10 secs",

                    /*
                        List of defenses to invoke if monitor expression is true
                     */
                    "defenses": [ "block" ],

                    /*
                        Enable or disable the monitor
                     */
                    "enable": true,
                },
            },
        },

        /*
            Display server-side errors in the browser
         */
        showErrors: true,

        /*
            Source file responsible for responding to the request.
         */
        source: "filename",

        /*
            SSL configuration
         */
        ssl: {
            /*
                Certificate authority of root certificates to verify peers
             */
            authority: {
                /*
                    File of catentated certificates
                 */
                file: "",

                /*
                    Directory of certificates
                 */
                directory:  "",
            },

            /*
                Session cache size in items
             */
            cache: 512,

            /*
                Server's own certificate filename
             */
            certificate: "server.crt",

            /*
                Ordered list of preferred ciphers
             */
            ciphers: [
                "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
                "TLS_ECDHE_ECDSA_WITH_AES_256_CCM",
                "TLS_DHE_RSA_WITH_AES_256_CCM",
                "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
                "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8",
                "TLS_DHE_RSA_WITH_AES_256_CCM_8",
                "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
                "TLS_ECDHE_ECDSA_WITH_AES_128_CCM",
                "TLS_DHE_RSA_WITH_AES_128_CCM",
                "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
                "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8",
                "TLS_DHE_RSA_WITH_AES_128_CCM_8",
                "TLS_RSA_WITH_AES_256_GCM_SHA384",
                "TLS_RSA_WITH_AES_256_CCM",
                "TLS_RSA_WITH_AES_256_CBC_SHA256",
                "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384",
                "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
                "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
                "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
                "TLS_RSA_WITH_AES_256_CCM_8",
                "TLS_RSA_WITH_AES_128_GCM_SHA256",
                "TLS_RSA_WITH_AES_128_CCM",
                "TLS_RSA_WITH_AES_128_CBC_SHA256",
                "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
                "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
                "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
                "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
                "TLS_RSA_WITH_AES_128_CCM_8",
            ],

            /*
                Server private key file
             */
            key: "server.key",

            /*
                Send debug trace starting at this level (defaults to 3)
             */
            logLevel: 3,

            /*
                Supported protocols
             */
            protocols: [
                "all", "-sslv3", "+tls", "-tlsv1.1", "tlsv1.2"
            ],

            /*
                Enable session renegotiation (defaults to true)
             */
            renegotiate: true,

            /*
                Enable session tickets
             */
            ticket: true,

            /*
                SSL Session timeout
             */
            timeout: "1day",

            /*
                Verification options
             */
            verify: {
                /*
                    Verification the client certificate. Self-signed certificates permitted.
                 */
                client: true,
                /*
                    Verification the client certificate issuer. Self-signed certificates not permitted.
                 */
                issuer: true,
            },
        },

        /*
            Stealth mode operates a quietly as possible
         */
        stealth: true,

        /*
            Buffer or stream input by mime type. This directive is per-host, not per-route.
            The value may be true, false or a URI
         */
        stream: [
            { mime: 'application/x-www-form-urlencoded', stream: false, uri: '/some-uri' },
        ],

        /*
            Target rule to process the request
         */
        target: {
            operation: "run",
            args: "greetings-$1",
        },

        /*
            Default timeouts. Use strings with unit suffixes. "5mins"
         */
        timeouts: {
            /*
                Maximum time for application to exit when waiting for requests to complete
             */
            exit:       "30secs",

            /*
                Maximum time to receive request headers
             */
            parse:      "20secs",

            /*
                Maximum time to of I/O inactivity for a request
             */
            inactivity: "300secs",

            /*
                Maximum request duration
             */
            request:    "infinite",

            /*
                Maximum user session duration
             */
            session: "30mins",
        },

        /*
            Request trace control
         */
        trace: {
            /*
                Trace output type (common, detail)
             */
            type: "detail",

            /*
                Common log format
             */
            format: "%h %l %u %t \"%r\" %>s %b %n",

            /*
                Request trace log filename or destination
             */
            location: "stdout",

            /*
                Default verbosity level (0-5)
             */
            level: "2",

            /*
                Levels at which to trace request events
             */
            levels: {
                request: 1,
                error: 2,
                result: 2,
                context: 3,
                form: 4,
                body: 5,
                debug: 5,
            },

            /*
                Keep up to 5 log files
             */
            backup: 5,

            /*
                Start a new trace log file on restart
             */
            anew: true,

            /*
                Maximum file size before starting a new trace log file
             */
            size: "10MB",

            /*
                Maximum tx and rx content to trace
             */
            content: "1K",
        },

        /*
            Enable the upload filter. This applies globally to all routes.
         */
        upload: true,

        /*
            Set to include a XSRF token to minimize CSRF vulnerabilies.
            In the future, if all browsers support the SameSite header, then this may not be required.
         */
        xsrf: true,
    },

    /*
        Mode specific property collections. The designated mode collection is copied to the top level.
        The mode property set is selected by the package.json "mode" property.
     */
    modes: {
        debug: {
            /*
                Collection of properties that are copied to the top-level if in debug mode
             */
        },
        release: {
            /*
                Collection of properties that are copied to the top level if in release mode
             */
        }
    }
}
